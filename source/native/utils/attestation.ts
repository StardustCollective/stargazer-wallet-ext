import {Platform} from 'react-native';
import AndroidPlayIntegrity from 'react-native-google-play-integrity';
import * as iOSAppAttest from 'react-native-ios-appattest';
import {dag4} from '@stardust-collective/dag4';
import {encodeToBase64} from '../../utils/encoding';

export type AttestationResult = {
  token: string;
  keyId?: string; // iOS-specific
  platform: 'ios' | 'android';
};

class AttestationAPI {
  private static instance: AttestationAPI;
  private constructor() {}

  public static getInstance(): AttestationAPI {
    if (!AttestationAPI.instance) {
      AttestationAPI.instance = new AttestationAPI();
    }
    return AttestationAPI.instance;
  }

  /**
   * Gets an attestation token for the current device.
   * On Android: Uses Play Integrity API
   * On iOS: Uses App Attest API
   *
   * @param {string} challenge - A base64 encoded challenge string
   * @returns {Promise<AttestationResult>} The attestation result containing the token
   * @throws {Error} If attestation fails or platform is not supported
   */
  public async getAttestationToken(
    challenge: string,
  ): Promise<AttestationResult> {
    if (Platform.OS === 'android') {
      return this.getAndroidAttestation(challenge);
    } else if (Platform.OS === 'ios') {
      return this.getIOSAttestation(challenge);
    } else {
      throw new Error('Unsupported platform for attestation');
    }
  }

  /**
   * Prepares the Standard Integrity Token Provider for attestation.
   * Only available on Android.
   *
   * @param {number} cloudProjectNumber - The cloud project number of the app
   * @returns {Promise<boolean>} - True if the provider was prepared, false otherwise
   */
  public async prepareAndroidProvider(
    cloudProjectNumber: number,
  ): Promise<boolean> {
    if (Platform.OS === 'android') {
      try {
        await AndroidPlayIntegrity.prepareStandardIntegrityTokenProvider(
          `${cloudProjectNumber}`,
        );
        return true;
      } catch (error) {
        return false;
      }
    }

    return false;
  }

  /**
   * Gets an attestation token using Android's Play Integrity API
   *
   * @param {string} challenge - A base64 encoded challenge string
   * @returns {Promise<AttestationResult>} The attestation result
   * @throws {Error} If Play Integrity check fails
   */
  private async getAndroidAttestation(
    challenge: string,
  ): Promise<AttestationResult> {
    try {
      // First check if Play Integrity is available
      const isAvailable = await AndroidPlayIntegrity.isPlayIntegrityAvailable();
      if (!isAvailable) {
        throw new Error('Play Integrity API is not available on this device');
      }

      // Checks if Standard Integrity Token Provider is prepared
      const isPrepared =
        await AndroidPlayIntegrity.isStandardIntegrityTokenProviderPrepared();
      if (!isPrepared) {
        throw new Error('Standard Integrity Token Provider is not prepared');
      }

      // Request the standard integrity token
      const token = await AndroidPlayIntegrity.requestStandardIntegrityToken(
        challenge,
      );

      return {
        token,
        platform: 'android',
      };
    } catch (error) {
      throw new Error(
        `Android Play Integrity attestation failed: ${
          error instanceof Error ? error.message : 'Unknown error'
        }`,
      );
    }
  }

  /**
   * Gets an attestation token using iOS's App Attest API
   *
   * @param {string} challenge - A challenge string (generated by the server)
   * @returns {Promise<AttestationResult>} The attestation result
   * @throws {Error} If App Attest fails
   */
  private async generateIOSAttestationKeys(
    challenge: string,
  ): Promise<AttestationResult> {
    try {
      const isAvailable = await iOSAppAttest.attestationSupported();
      if (!isAvailable) {
        throw new Error('App Attest is not supported on this device');
      }

      // Generate a new key for attestation
      const keyId = await iOSAppAttest.generateKeys();

      // Compute SHA256 hash of the challenge
      const challengeHash = dag4.keyStore.sha256(challenge);

      // Encode the hash to base64
      const challengeHashBase64 = encodeToBase64(challengeHash);

      // Get the attestation using the generated key
      const attestationObject = await iOSAppAttest.attestKeys(
        keyId,
        challengeHashBase64,
      );

      return {
        token: attestationObject, // Base64 encoded attestation object
        keyId, // Store keyId for future assertions
        platform: 'ios',
      };
    } catch (error) {
      throw new Error(
        `iOS App Attest attestation failed: ${
          error instanceof Error ? error.message : 'Unknown error'
        }`,
      );
    }
  }

  /**
   * Gets an attestation token using iOS's App Attest API
   *
   * @param {string} requestData - A challenge string (generated by the server)
   * @returns {Promise<AttestationResult>} The attestation result
   * @throws {Error} If App Attest fails
   */
  private async getIOSAttestation(
    requestData: string,
  ): Promise<AttestationResult> {
    try {
      const isAvailable = await iOSAppAttest.attestationSupported();
      if (!isAvailable) {
        throw new Error('App Attest is not supported on this device');
      }

      // Compute SHA256 hash of the request data
      const requestDataHash = dag4.keyStore.sha256(requestData);

      // Encode the hash to base64
      const requestDataHashBase64 = encodeToBase64(requestDataHash);

      const keyId = 'keyId';

      // Get the attestation using the generated key
      const attestationObject = await iOSAppAttest.attestRequestData(
        requestDataHashBase64,
        keyId,
      );

      return {
        token: attestationObject, // Base64 encoded attestation object
        keyId, // Store keyId for future assertions
        platform: 'ios',
      };
    } catch (error) {
      throw new Error(
        `iOS App Attest attestation failed: ${
          error instanceof Error ? error.message : 'Unknown error'
        }`,
      );
    }
  }
}

export default AttestationAPI.getInstance();
