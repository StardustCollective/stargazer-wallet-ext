diff --git a/node_modules/@stardust-collective/dag4-wallet/src/dag-monitor.ts b/node_modules/@stardust-collective/dag4-wallet/src/dag-monitor.ts
index e681476..aa444c9 100644
--- a/node_modules/@stardust-collective/dag4-wallet/src/dag-monitor.ts
+++ b/node_modules/@stardust-collective/dag4-wallet/src/dag-monitor.ts
@@ -29,11 +29,11 @@ export class DagMonitor {
     return this.memPoolChange$;
   }
 
-  addToMemPoolMonitor (value: PendingTx | string) {
+  async addToMemPoolMonitor (value: PendingTx | string) {
 
     const key =  `network-${globalDagNetwork.getNetwork().id}-mempool`;
 
-    const payload: PendingTx[] = this.cacheUtils.get(key) || [];
+    let payload: PendingTx[] = (await this.cacheUtils.get(key)) || [];
 
     let tx = value as PendingTx;
 
@@ -41,11 +41,15 @@ export class DagMonitor {
       tx = { hash: value, timestamp: Date.now() } as PendingTx;
     }
 
+    if (!payload || !payload.some) {
+      payload = [];
+    }
+
     if (!payload.some(p => p.hash === tx.hash)) {
 
       payload.push(tx);
 
-      this.cacheUtils.set(key, payload);
+      await this.cacheUtils.set(key, payload);
 
       this.lastTimer = Date.now();
       this.pendingTimer = 1000;
@@ -64,18 +68,30 @@ export class DagMonitor {
     return pendingTxs.map(pending => this.transformPendingToTransaction(pending)).concat(cTxs);
   }
 
-  getMemPoolFromMonitor(address?: string): PendingTx[] {
+  async getMemPoolFromMonitor(address?: string): Promise<PendingTx[]> {
     address = address || this.walletParent.address;
 
-    const txs: PendingTx[]  = this.cacheUtils.get(`network-${globalDagNetwork.getNetwork().id}-mempool`) || [];
+    let txs: PendingTx[]  = [];
+
+    try {
+      txs = await this.cacheUtils.get(`network-${globalDagNetwork.getNetwork().id}-mempool`) || [];
+    } catch(err) {
+      console.log('getMemPoolFromMonitor err: ', err);
+      console.log(err.stack);
+      return [];
+    }
+
+    if (!txs) {
+      txs = [];
+    }
 
     return txs.filter(tx => !address || !tx.receiver || tx.receiver === address || tx.sender === address);
   }
 
-  setToMemPoolMonitor(pool: PendingTx[]) {
+  async setToMemPoolMonitor(pool: PendingTx[]) {
     const key =  `network-${globalDagNetwork.getNetwork().id}-mempool`;
 
-    this.cacheUtils.set(key, pool);
+    await this.cacheUtils.set(key, pool);
   }
 
   async waitForTransaction (hash: string) {
@@ -113,13 +129,13 @@ export class DagMonitor {
 
     //Has any memPollTxs pending
     if (pendingTxs.length) {
-      this.setToMemPoolMonitor(pendingTxs);
+      await this.setToMemPoolMonitor(pendingTxs);
       this.pendingTimer = 10000;
       this.lastTimer = Date.now();
       setTimeout(() => this.pollPendingTxs(), 10000);
     } else if (poolCount > 0) {
       //NOTE: All tx in persisted pool have completed
-      this.setToMemPoolMonitor([]);
+      await this.setToMemPoolMonitor([]);
     }
 
     this.memPoolChange$.next({
@@ -129,7 +145,7 @@ export class DagMonitor {
   }
 
   private async processPendingTxs () {
-    const pool = this.getMemPoolFromMonitor();
+    const pool = await this.getMemPoolFromMonitor();
     const transTxs: PendingTx[] = [];
     const nextPool: PendingTx[] = [];
 
